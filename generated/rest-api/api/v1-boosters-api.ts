/* tslint:disable */
/* eslint-disable */
/**
 * Nestjs Auth0 Template API
 * Nestjs Auth0 Template API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * V1BoostersApi - axios parameter creator
 * @export
 */
export const V1BoostersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary boosterのmission-couponをpopする
         * @param {string} uniqueKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissionCoupon: async (uniqueKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueKey' is not null or undefined
            assertParamExists('getMissionCoupon', 'uniqueKey', uniqueKey)
            const localVarPath = `/v1/boosters/{uniqueKey}/get-mission-coupon`
                .replace(`{${"uniqueKey"}}`, encodeURIComponent(String(uniqueKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1BoostersApi - functional programming interface
 * @export
 */
export const V1BoostersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1BoostersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary boosterのmission-couponをpopする
         * @param {string} uniqueKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMissionCoupon(uniqueKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMissionCoupon(uniqueKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1BoostersApi - factory interface
 * @export
 */
export const V1BoostersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1BoostersApiFp(configuration)
    return {
        /**
         * 
         * @summary boosterのmission-couponをpopする
         * @param {string} uniqueKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMissionCoupon(uniqueKey: string, options?: any): AxiosPromise<string> {
            return localVarFp.getMissionCoupon(uniqueKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1BoostersApi - interface
 * @export
 * @interface V1BoostersApi
 */
export interface V1BoostersApiInterface {
    /**
     * 
     * @summary boosterのmission-couponをpopする
     * @param {string} uniqueKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1BoostersApiInterface
     */
    getMissionCoupon(uniqueKey: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * V1BoostersApi - object-oriented interface
 * @export
 * @class V1BoostersApi
 * @extends {BaseAPI}
 */
export class V1BoostersApi extends BaseAPI implements V1BoostersApiInterface {
    /**
     * 
     * @summary boosterのmission-couponをpopする
     * @param {string} uniqueKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1BoostersApi
     */
    public getMissionCoupon(uniqueKey: string, options?: AxiosRequestConfig) {
        return V1BoostersApiFp(this.configuration).getMissionCoupon(uniqueKey, options).then((request) => request(this.axios, this.basePath));
    }
}
