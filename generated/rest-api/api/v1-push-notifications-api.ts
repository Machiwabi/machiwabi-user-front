/* tslint:disable */
/* eslint-disable */
/**
 * Nestjs Auth0 Template API
 * Nestjs Auth0 Template API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUserDeviceInput } from '../types';
// @ts-ignore
import { PushNotificationEntity } from '../types';
/**
 * V1PushNotificationsApi - axios parameter creator
 * @export
 */
export const V1PushNotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/push-notifications/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Push通知を購読する
         * @param {CreateUserDeviceInput} createUserDeviceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe2: async (createUserDeviceInput: CreateUserDeviceInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDeviceInput' is not null or undefined
            assertParamExists('subscribe2', 'createUserDeviceInput', createUserDeviceInput)
            const localVarPath = `/v1/push-notifications/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDeviceInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1PushNotificationsApi - functional programming interface
 * @export
 */
export const V1PushNotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1PushNotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNotification(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNotification(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Push通知を購読する
         * @param {CreateUserDeviceInput} createUserDeviceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscribe2(createUserDeviceInput: CreateUserDeviceInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushNotificationEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscribe2(createUserDeviceInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1PushNotificationsApi - factory interface
 * @export
 */
export const V1PushNotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1PushNotificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification(options?: any): AxiosPromise<void> {
            return localVarFp.sendNotification(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Push通知を購読する
         * @param {CreateUserDeviceInput} createUserDeviceInput 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscribe2(createUserDeviceInput: CreateUserDeviceInput, options?: any): AxiosPromise<PushNotificationEntity> {
            return localVarFp.subscribe2(createUserDeviceInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1PushNotificationsApi - interface
 * @export
 * @interface V1PushNotificationsApi
 */
export interface V1PushNotificationsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PushNotificationsApiInterface
     */
    sendNotification(options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Push通知を購読する
     * @param {CreateUserDeviceInput} createUserDeviceInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PushNotificationsApiInterface
     */
    subscribe2(createUserDeviceInput: CreateUserDeviceInput, options?: AxiosRequestConfig): AxiosPromise<PushNotificationEntity>;

}

/**
 * V1PushNotificationsApi - object-oriented interface
 * @export
 * @class V1PushNotificationsApi
 * @extends {BaseAPI}
 */
export class V1PushNotificationsApi extends BaseAPI implements V1PushNotificationsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PushNotificationsApi
     */
    public sendNotification(options?: AxiosRequestConfig) {
        return V1PushNotificationsApiFp(this.configuration).sendNotification(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Push通知を購読する
     * @param {CreateUserDeviceInput} createUserDeviceInput 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1PushNotificationsApi
     */
    public subscribe2(createUserDeviceInput: CreateUserDeviceInput, options?: AxiosRequestConfig) {
        return V1PushNotificationsApiFp(this.configuration).subscribe2(createUserDeviceInput, options).then((request) => request(this.axios, this.basePath));
    }
}
